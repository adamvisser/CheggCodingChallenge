

function runUsernameClick() {
	//TODO the user has now clicked check so we need to make sure its not empty, else give an error
	if (formIsEmpty()) {
		populateUseableUserNameListFromService();
		tellViewRequestIsLoading();
	} else {
		tellViewInputIsEmpty();
	}
}

function runObservers() {
	//TODO actually flesh these out to "guess" possible usernames to send over in addition to what they check that FIRST click
	runWordObserver();
	runEmptyObserver();
}


function formIsEmpty() {
	// body...
	if (getFormValue() == "") {
		return true;
	}
	return false;
}

function getFormValue() {
	return $("#chg-balloon-input").val();
}


function tellViewRequestIsLoading() {
	//TODO we add in a "were loading" message for the user
}

function tellViewRequestIsDone(names) {
	function addToIterateArray(name) {
		var htmlToAdd = "<i class='red checkmark box icon'></i>".concat(name, "</br>");
		var currentHTML = $("#username-suggestion-view").html();
		//this rerenders all the things and its probably pretty horrible for sure
		$("#username-suggestion-view").html(currentHTML.concat(htmlToAdd));
	}
	data.forEach(names);
}

function tellViewInputIsEmpty() {
	// body...
}


function setupUserNameList() {
	//since I dont have anything to act as "scope" we will pretend like its the whole window (app)
	if (window.USERNAMELIST === undefined) {
		window.USERNAMELIST = {};
		window.USERNAMELIST.usernameList = [];
		window.USERNAMELIST.goodUserNames = [];
		window.USERNAMELIST.badUserNames = [];
	}
}

function userNameLength() {
	return window.USERNAMELIST.usernameList.length;
}

//this just returns a list of useable username objects, or a string for use within a request. depending on the former will depend on what it returns upon fail, not sure just yet lots to do
function getUserNameList(forRequest = false) {

	//I wanted to make sure that only this function can get called, so that it will return the proper stuff, encapsulation things.
	//this returns the list of GOOD usernames as an array
	function getUseableUserNameListForAnIteration() {}

	//this returns the list of usernames as a string
	function getUseableUserNameListForARequest() {
		//this is needed to actually return something
		var returnString = "";

		//lets make sure that this scope has the ability to foreach over the array we are about to create
		//without having to create the function in line
		function addUserName(item) {
			returnString.concat(item);
			returnString.concat(",");
		}
		window.USERNAMELIST.usernameList.forEach(addUserName);
		console.log('built the username string for the request');
		return returnString.substring(0, returnString.length - 1);
	}

	if (forRequest) {
		return getUseableUserNameListForARequest();
	} else {
		return getUseableUserNameListForARequest();
	}
}

//this actually sets up, then runs the ajax request
function populateUseableUserNameListFromService() {
	// TODO check the below runs correctly
	setupUserNameList();
	if (!userNameLength()) {
		noUseableUsernamesAddNumbers();
	}
	// TODO use the json service to send a request using the usernameList from window scope
	sendRequest();
}

//this is the fucntion that ajax calls when it successfullly recieves a response
function populateUseableUserNameList(data) {
	function setupBadUserName(item) {
		window.USERNAMELIST.badUserNames.push(string(item.username));
	}

	function setupGoodUserName(item) {
		if (window.USERNAMELIST.badUserNames.indexOf(string(item.username)) == -1) {
			window.USERNAMELIST.goodUserNames.push(string(item.username));
		}
	}
	// TODO check the below runs correctly
	setupUserNameList();
	data.forEach(setupBadUserName);
	data.forEach(setupGoodUserName);
	window.USERNAMELIST.usernameList = [];
	// TODO from response put list of good usernames in place
	tellViewRequestIsDone(window.USERNAMELIST.goodUserNames);
}

//this is used by the form observers to add in possible names as they find them
function addNameToList(name) {
	// TODO check the below runs correctly
	setupUserNameList();
	//again casing as string cuz ive put no time into error handline
	window.USERNAMELIST.usernameList.push(string(name));
	console.log('added a possible username for use');
}

//this is used by the ajax response function to add in names that wont work
function addNameToBadList(name) {}
// TODO add in name to the list of bad user names in window scope


//this is used by the ajax response function to add in names that will work
function addNameToGoodList(name) {
	// TODO add in name to the list of good user names in window scope
}
//TODO implement this out to actually check for words, instead of just being all "hey look i can add 2 numbers at the end"

function finalWordCheck() {
	// TODO before we send off the request, make sure we have enough user names being sent of in the request
	// TODO make sure the below gets called at the right time, and works
}

function noUseableUsernamesAddNumbers() {
	// TODO we havent done so well and have no words to use to generate some good words, just add some numbers to whats in the form :(

	//lets make sure that this scope has the ability to foreach over the array we are about to create
	//without having to create the function in line
	function addRandomUserName(item) {
		addNameToList(formWord.concat(item));
	}

	console.log('O No! observers found no words, adding numbers so we have some now');
	//first we need some numbers
	//lets make sure they dont have a way of being the same!!!!
	var randomNumber = Math.floor(Math.random() * 1000);
	var randomModifer = Math.floor(Math.random() * 100);
	var randomDivider = Math.floor(Math.random() * 10);
	var randomNumbers = [string(randomNumber), string(randomNumber + randomModifer), string(randomNumber - randomModifer), string((randomNumber + randomModifer) / randomDivider), string((randomNumber - randomModifer) / randomDivider)];
	//then we need to get the username itself, gonna cast as string cuz... i have no error handling like anywhere in here and im scared
	var formWord = string(getFormValue());
	randomNumbers.forEach(addRandomUserName);
}

//one of the observers may have found a new word to use, check for it then add it in
function addWordToUseableWordsList(word) {
	// TODO make the above comment come true
}

function getUseableWordsList() {
	// TODO
}

function setupWordsList() {
	//since I dont have anything to act as "scope" we will pretend like its the whole window (app)
	if (window.WORDOBSERVER === undefined) {
		window.WORDOBSERVER = {};
		window.WORDOBSERVER.wordlist = {};
	}
}


function sendRequest() {
	function proeccessRequestResponse(data) {
		// This logs Trump4Pres's user data, since the username is registered, but
		// no user data for FeelTheBern1, since that username is not currently registered
		console.log("request done, logic starting");
		console.log(data);
		populateUseableUserNameList(data);
		console.log("request logic done");
	}

	// TODO use the below copied code to bring all the comments below it to life
	$.ajax("http://chegg-tutors.appspot.com/coding-challenge/api/user/?username=".concat(getUseableUserNameList(true))).done(proeccessRequestResponse);
}
//# sourceMappingURL=data:application/json;base64,
