

function runUsernameClick() {
	//TODO do all the stuff for the challenge
}




function setupUserNameList() {
	//since I dont have anything to act as "scope" we will pretend like its the whole window (app)
	if (window.USERNAMELIST === undefined) {
		window.USERNAMELIST = {};
		window.USERNAMELIST.usernameList = {};
		window.USERNAMELIST.goodUserNames = {};
		window.USERNAMELIST.badUserNames = {};
	}
}

//this just returns a list of useable username objects, or a string for use within a request. depending on the former will depend on what it returns upon fail, not sure just yet lots to do
function getUseableUserNameList(forRequest = false) {
	if (forRequest) {
		return getUseableUserNameListForARequest();
	} else {
		return getUseableUserNameListForARequest();
	}
}

//this returns the list of useable usernames as a string
function getUseableUserNameListForAnIteration() {}

//this returns the list of useable usernames as a string
function getUseableUserNameListForARequest() {}

//this actually sets up, then runs the ajax request
function populateUseableUserNameListFromService() {
	// TODO check the below runs correctly
	setupUserNameList();
	// TODO use the json service to send a request using the usernameList from window scope
	// TODO upon recieve of response, remove all from usernameList
	// TODO from response put list of bad usernames in place
	// TODO from response put list of good usernames in place
	// TODO return object of useable user names
}

//this is the fucntion that ajax calls when it successfullly recieves a response
function populateUseableUserNameList() {
	// TODO check the below runs correctly
	setupUserNameList();
	// TODO from response put list of bad usernames in place
	// TODO from response put list of good usernames in place
	// TODO return object of useable user names
}

//this is used by the form observers to add in possible names as they find them
function addNameToList(name) {}
// TODO add in name to usernameList in window scope


//this is used by the ajax response function to add in names that wont work
function addNameToBadList(name) {}
// TODO add in name to the list of bad user names in window scope


//this is used by the ajax response function to add in names that will work
function addNameToGoodList(name) {
	// TODO add in name to the list of good user names in window scope
}
//TODO implement this out to actually check for words, instead of just being all "hey look i can add 2 numbers at the end"

function finalWordCheck() {
	// TODO before we send off the request, make sure we have enough user names being sent of in the request
	// TODO make sure the below gets called at the right time, and works
}

function noUseableUsernamesAddNumbers() {}
// TODO we havent done so well and have no words to use to generate some good words, just add some numbers to whats in the form :(


//one of the observers may have found a new word to use, check for it then add it in
function addWordToUseableWordsList(word) {
	// TODO make the above comment come true
}

function getUseableWordsList() {
	// TODO
}

function setupWordsList() {
	//since I dont have anything to act as "scope" we will pretend like its the whole window (app)
	if (window.WORDOBSERVER === undefined) {
		window.WORDOBSERVER = {};
		window.WORDOBSERVER.wordlist = {};
	}
}


function sendRequest(argument) {
	// TODO use the below copied code to bring all the comments below it to life
	$.ajax("/coding-challenge/api/user/?username=".concat(getUseableUserNameList(true))).done(function (data) {
		// This logs Trump4Pres's user data, since the username is registered, but
		// no user data for FeelTheBern1, since that username is not currently registered
		console.log(data);
		updateView(data);
	});
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsIkVtcHR5T2JzZXJ2ZXIuanMiLCJXb3JkT2JzZXJ2ZXIuanMiLCJVc2VyTmFtZUxpc3QuanMiLCJXb3JkTGlzdC5qcyIsIlVzZXJOYW1lU2VydmljZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUlBLFNBQVMsZ0JBQVQsR0FBMkI7O0NBQTNCO0FDSkE7QUNBQTs7O0FDR0EsU0FBUyxpQkFBVCxHQUE0Qjs7QUFFM0IsS0FBRyxPQUFPLFlBQVAsS0FBd0IsU0FBeEIsRUFBa0M7QUFDcEMsU0FBTyxZQUFQLEdBQXNCLEVBQXRCLENBRG9DO0FBRXBDLFNBQU8sWUFBUCxDQUFvQixZQUFwQixHQUFtQyxFQUFuQyxDQUZvQztBQUdwQyxTQUFPLFlBQVAsQ0FBb0IsYUFBcEIsR0FBb0MsRUFBcEMsQ0FIb0M7QUFJcEMsU0FBTyxZQUFQLENBQW9CLFlBQXBCLEdBQW1DLEVBQW5DLENBSm9DO0VBQXJDO0NBRkQ7OztBQVlBLFNBQVMsc0JBQVQsQ0FBZ0MsYUFBYSxLQUFiLEVBQW9CO0FBQ25ELEtBQUcsVUFBSCxFQUFjO0FBQ2IsU0FBTyxtQ0FBUCxDQURhO0VBQWQsTUFFSztBQUNKLFNBQU8sbUNBQVAsQ0FESTtFQUZMO0NBREQ7OztBQVNBLFNBQVMsb0NBQVQsR0FBZ0QsRUFBaEQ7OztBQUlBLFNBQVMsaUNBQVQsR0FBNkMsRUFBN0M7OztBQU1BLFNBQVMsc0NBQVQsR0FBa0Q7O0FBRWpEOzs7Ozs7QUFGaUQsQ0FBbEQ7OztBQVlBLFNBQVMsMkJBQVQsR0FBdUM7O0FBRXRDOzs7O0FBRnNDLENBQXZDOzs7QUFTQSxTQUFTLGFBQVQsQ0FBdUIsSUFBdkIsRUFBNEI7Ozs7O0FBQTVCLFNBS1MsZ0JBQVQsQ0FBMEIsSUFBMUIsRUFBK0I7Ozs7O0FBQS9CLFNBTVMsaUJBQVQsQ0FBMkIsSUFBM0IsRUFBZ0M7O0NBQWhDOzs7QUM5REEsU0FBUyxjQUFULEdBQTBCOzs7Q0FBMUI7O0FBS0EsU0FBUyw0QkFBVCxHQUF1Qzs7Ozs7QUFBdkMsU0FLUyx5QkFBVCxDQUFtQyxJQUFuQyxFQUF3Qzs7Q0FBeEM7O0FBSUEsU0FBUyxtQkFBVCxHQUE4Qjs7Q0FBOUI7O0FBSUEsU0FBUyxjQUFULEdBQXlCOztBQUV4QixLQUFHLE9BQU8sWUFBUCxLQUF3QixTQUF4QixFQUFrQztBQUNwQyxTQUFPLFlBQVAsR0FBc0IsRUFBdEIsQ0FEb0M7QUFFcEMsU0FBTyxZQUFQLENBQW9CLFFBQXBCLEdBQStCLEVBQS9CLENBRm9DO0VBQXJDO0NBRkQ7OztBQ2xCQSxTQUFTLFdBQVQsQ0FBcUIsUUFBckIsRUFBK0I7O0FBRTlCLEdBQUUsSUFBRixDQUFPLHdDQUF3QyxNQUF4QyxDQUErQyx1QkFBdUIsSUFBdkIsQ0FBL0MsQ0FBUCxFQUFxRixJQUFyRixDQUEwRixVQUFTLElBQVQsRUFBZTs7O0FBR3hHLFVBQVEsR0FBUixDQUFZLElBQVosRUFId0c7QUFJeEcsYUFBVyxJQUFYLEVBSndHO0VBQWYsQ0FBMUYsQ0FGOEI7Q0FBL0IiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5cblxuXG5mdW5jdGlvbiBydW5Vc2VybmFtZUNsaWNrKCl7XG5cdC8vVE9ETyBkbyBhbGwgdGhlIHN0dWZmIGZvciB0aGUgY2hhbGxlbmdlXG59IixudWxsLG51bGwsIlxuXG5cbmZ1bmN0aW9uIHNldHVwVXNlck5hbWVMaXN0KCl7XG5cdC8vc2luY2UgSSBkb250IGhhdmUgYW55dGhpbmcgdG8gYWN0IGFzIFwic2NvcGVcIiB3ZSB3aWxsIHByZXRlbmQgbGlrZSBpdHMgdGhlIHdob2xlIHdpbmRvdyAoYXBwKVxuXHRpZih3aW5kb3cuVVNFUk5BTUVMSVNUID09PSB1bmRlZmluZWQpe1xuXHRcdHdpbmRvdy5VU0VSTkFNRUxJU1QgPSB7fTtcblx0XHR3aW5kb3cuVVNFUk5BTUVMSVNULnVzZXJuYW1lTGlzdCA9IHt9O1xuXHRcdHdpbmRvdy5VU0VSTkFNRUxJU1QuZ29vZFVzZXJOYW1lcyA9IHt9O1xuXHRcdHdpbmRvdy5VU0VSTkFNRUxJU1QuYmFkVXNlck5hbWVzID0ge307XG5cdH1cbn1cblxuXG4vL3RoaXMganVzdCByZXR1cm5zIGEgbGlzdCBvZiB1c2VhYmxlIHVzZXJuYW1lIG9iamVjdHMsIG9yIGEgc3RyaW5nIGZvciB1c2Ugd2l0aGluIGEgcmVxdWVzdC4gZGVwZW5kaW5nIG9uIHRoZSBmb3JtZXIgd2lsbCBkZXBlbmQgb24gd2hhdCBpdCByZXR1cm5zIHVwb24gZmFpbCwgbm90IHN1cmUganVzdCB5ZXQgbG90cyB0byBkb1xuZnVuY3Rpb24gZ2V0VXNlYWJsZVVzZXJOYW1lTGlzdChmb3JSZXF1ZXN0ID0gZmFsc2UpIHtcblx0aWYoZm9yUmVxdWVzdCl7XG5cdFx0cmV0dXJuIGdldFVzZWFibGVVc2VyTmFtZUxpc3RGb3JBUmVxdWVzdCgpO1xuXHR9ZWxzZXtcblx0XHRyZXR1cm4gZ2V0VXNlYWJsZVVzZXJOYW1lTGlzdEZvckFSZXF1ZXN0KCk7XG5cdH1cbn1cblxuLy90aGlzIHJldHVybnMgdGhlIGxpc3Qgb2YgdXNlYWJsZSB1c2VybmFtZXMgYXMgYSBzdHJpbmdcbmZ1bmN0aW9uIGdldFVzZWFibGVVc2VyTmFtZUxpc3RGb3JBbkl0ZXJhdGlvbigpIHtcbn1cblxuLy90aGlzIHJldHVybnMgdGhlIGxpc3Qgb2YgdXNlYWJsZSB1c2VybmFtZXMgYXMgYSBzdHJpbmdcbmZ1bmN0aW9uIGdldFVzZWFibGVVc2VyTmFtZUxpc3RGb3JBUmVxdWVzdCgpIHtcbn1cblxuXG5cbi8vdGhpcyBhY3R1YWxseSBzZXRzIHVwLCB0aGVuIHJ1bnMgdGhlIGFqYXggcmVxdWVzdFxuZnVuY3Rpb24gcG9wdWxhdGVVc2VhYmxlVXNlck5hbWVMaXN0RnJvbVNlcnZpY2UoKSB7XG5cdC8vIFRPRE8gY2hlY2sgdGhlIGJlbG93IHJ1bnMgY29ycmVjdGx5XG5cdHNldHVwVXNlck5hbWVMaXN0KCk7XG5cdC8vIFRPRE8gdXNlIHRoZSBqc29uIHNlcnZpY2UgdG8gc2VuZCBhIHJlcXVlc3QgdXNpbmcgdGhlIHVzZXJuYW1lTGlzdCBmcm9tIHdpbmRvdyBzY29wZVxuXHQvLyBUT0RPIHVwb24gcmVjaWV2ZSBvZiByZXNwb25zZSwgcmVtb3ZlIGFsbCBmcm9tIHVzZXJuYW1lTGlzdFxuXHQvLyBUT0RPIGZyb20gcmVzcG9uc2UgcHV0IGxpc3Qgb2YgYmFkIHVzZXJuYW1lcyBpbiBwbGFjZVxuXHQvLyBUT0RPIGZyb20gcmVzcG9uc2UgcHV0IGxpc3Qgb2YgZ29vZCB1c2VybmFtZXMgaW4gcGxhY2Vcblx0Ly8gVE9ETyByZXR1cm4gb2JqZWN0IG9mIHVzZWFibGUgdXNlciBuYW1lc1xufVxuXG5cbi8vdGhpcyBpcyB0aGUgZnVjbnRpb24gdGhhdCBhamF4IGNhbGxzIHdoZW4gaXQgc3VjY2Vzc2Z1bGxseSByZWNpZXZlcyBhIHJlc3BvbnNlXG5mdW5jdGlvbiBwb3B1bGF0ZVVzZWFibGVVc2VyTmFtZUxpc3QoKSB7XG5cdC8vIFRPRE8gY2hlY2sgdGhlIGJlbG93IHJ1bnMgY29ycmVjdGx5XG5cdHNldHVwVXNlck5hbWVMaXN0KCk7XG5cdC8vIFRPRE8gZnJvbSByZXNwb25zZSBwdXQgbGlzdCBvZiBiYWQgdXNlcm5hbWVzIGluIHBsYWNlXG5cdC8vIFRPRE8gZnJvbSByZXNwb25zZSBwdXQgbGlzdCBvZiBnb29kIHVzZXJuYW1lcyBpbiBwbGFjZVxuXHQvLyBUT0RPIHJldHVybiBvYmplY3Qgb2YgdXNlYWJsZSB1c2VyIG5hbWVzXG59XG5cbi8vdGhpcyBpcyB1c2VkIGJ5IHRoZSBmb3JtIG9ic2VydmVycyB0byBhZGQgaW4gcG9zc2libGUgbmFtZXMgYXMgdGhleSBmaW5kIHRoZW1cbmZ1bmN0aW9uIGFkZE5hbWVUb0xpc3QobmFtZSl7XG5cdC8vIFRPRE8gYWRkIGluIG5hbWUgdG8gdXNlcm5hbWVMaXN0IGluIHdpbmRvdyBzY29wZVxufVxuXG4vL3RoaXMgaXMgdXNlZCBieSB0aGUgYWpheCByZXNwb25zZSBmdW5jdGlvbiB0byBhZGQgaW4gbmFtZXMgdGhhdCB3b250IHdvcmtcbmZ1bmN0aW9uIGFkZE5hbWVUb0JhZExpc3QobmFtZSl7XG5cdC8vIFRPRE8gYWRkIGluIG5hbWUgdG8gdGhlIGxpc3Qgb2YgYmFkIHVzZXIgbmFtZXMgaW4gd2luZG93IHNjb3BlXG59XG5cblxuLy90aGlzIGlzIHVzZWQgYnkgdGhlIGFqYXggcmVzcG9uc2UgZnVuY3Rpb24gdG8gYWRkIGluIG5hbWVzIHRoYXQgd2lsbCB3b3JrXG5mdW5jdGlvbiBhZGROYW1lVG9Hb29kTGlzdChuYW1lKXtcblx0Ly8gVE9ETyBhZGQgaW4gbmFtZSB0byB0aGUgbGlzdCBvZiBnb29kIHVzZXIgbmFtZXMgaW4gd2luZG93IHNjb3BlXG59IiwiLy9UT0RPIGltcGxlbWVudCB0aGlzIG91dCB0byBhY3R1YWxseSBjaGVjayBmb3Igd29yZHMsIGluc3RlYWQgb2YganVzdCBiZWluZyBhbGwgXCJoZXkgbG9vayBpIGNhbiBhZGQgMiBudW1iZXJzIGF0IHRoZSBlbmRcIlxuXG5cblxuZnVuY3Rpb24gZmluYWxXb3JkQ2hlY2soKSB7XG5cdC8vIFRPRE8gYmVmb3JlIHdlIHNlbmQgb2ZmIHRoZSByZXF1ZXN0LCBtYWtlIHN1cmUgd2UgaGF2ZSBlbm91Z2ggdXNlciBuYW1lcyBiZWluZyBzZW50IG9mIGluIHRoZSByZXF1ZXN0XG5cdC8vIFRPRE8gbWFrZSBzdXJlIHRoZSBiZWxvdyBnZXRzIGNhbGxlZCBhdCB0aGUgcmlnaHQgdGltZSwgYW5kIHdvcmtzXG59XG5cbmZ1bmN0aW9uIG5vVXNlYWJsZVVzZXJuYW1lc0FkZE51bWJlcnMoKXtcblx0Ly8gVE9ETyB3ZSBoYXZlbnQgZG9uZSBzbyB3ZWxsIGFuZCBoYXZlIG5vIHdvcmRzIHRvIHVzZSB0byBnZW5lcmF0ZSBzb21lIGdvb2Qgd29yZHMsIGp1c3QgYWRkIHNvbWUgbnVtYmVycyB0byB3aGF0cyBpbiB0aGUgZm9ybSA6KFxufVxuXG4vL29uZSBvZiB0aGUgb2JzZXJ2ZXJzIG1heSBoYXZlIGZvdW5kIGEgbmV3IHdvcmQgdG8gdXNlLCBjaGVjayBmb3IgaXQgdGhlbiBhZGQgaXQgaW5cbmZ1bmN0aW9uIGFkZFdvcmRUb1VzZWFibGVXb3Jkc0xpc3Qod29yZCl7XG5cdC8vIFRPRE8gbWFrZSB0aGUgYWJvdmUgY29tbWVudCBjb21lIHRydWVcbn1cblxuZnVuY3Rpb24gZ2V0VXNlYWJsZVdvcmRzTGlzdCgpe1xuXHQvLyBUT0RPIFxufVxuXG5mdW5jdGlvbiBzZXR1cFdvcmRzTGlzdCgpe1xuXHQvL3NpbmNlIEkgZG9udCBoYXZlIGFueXRoaW5nIHRvIGFjdCBhcyBcInNjb3BlXCIgd2Ugd2lsbCBwcmV0ZW5kIGxpa2UgaXRzIHRoZSB3aG9sZSB3aW5kb3cgKGFwcClcblx0aWYod2luZG93LldPUkRPQlNFUlZFUiA9PT0gdW5kZWZpbmVkKXtcblx0XHR3aW5kb3cuV09SRE9CU0VSVkVSID0ge307XG5cdFx0d2luZG93LldPUkRPQlNFUlZFUi53b3JkbGlzdCA9IHt9O1xuXHR9XG59IiwiXG5cblxuXG5mdW5jdGlvbiBzZW5kUmVxdWVzdChhcmd1bWVudCkge1xuXHQvLyBUT0RPIHVzZSB0aGUgYmVsb3cgY29waWVkIGNvZGUgdG8gYnJpbmcgYWxsIHRoZSBjb21tZW50cyBiZWxvdyBpdCB0byBsaWZlXG5cdCQuYWpheChcIi9jb2RpbmctY2hhbGxlbmdlL2FwaS91c2VyLz91c2VybmFtZT1cIi5jb25jYXQoZ2V0VXNlYWJsZVVzZXJOYW1lTGlzdCh0cnVlKSkpLmRvbmUoZnVuY3Rpb24oZGF0YSkge1xuXHRcdC8vIFRoaXMgbG9ncyBUcnVtcDRQcmVzJ3MgdXNlciBkYXRhLCBzaW5jZSB0aGUgdXNlcm5hbWUgaXMgcmVnaXN0ZXJlZCwgYnV0XG5cdFx0Ly8gbm8gdXNlciBkYXRhIGZvciBGZWVsVGhlQmVybjEsIHNpbmNlIHRoYXQgdXNlcm5hbWUgaXMgbm90IGN1cnJlbnRseSByZWdpc3RlcmVkXG5cdFx0Y29uc29sZS5sb2coZGF0YSk7XG5cdFx0dXBkYXRlVmlldyhkYXRhKTtcblx0fSk7XG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
