

function runUsernameClick() {
	//TODO the user has now clicked check so we need to make sure its not empty, else give an error
	if (!formIsEmpty()) {
		populateUseableUserNameListFromService();
		tellViewRequestIsLoading();
	} else {
		console.log(getFormValue());
		tellViewInputIsEmpty();
	}
}

function runObservers() {
	//TODO actually flesh these out to "guess" possible usernames to send over in addition to what they check that FIRST click
	runWordObserver();
	runEmptyObserver();
}

function setupApp() {

	// The User search API accepts a comma-separated list of usernames, and returns
	// user data for any matching records
	$.ajax("http://chegg-tutors.appspot.com/coding-challenge/api/user/?username=Hillary2016").done(function (data) {
		// This logs Hillary2016's user data, since the username is registered
		//console.log(JSON.stringify(data));
		//raw please thanks!!!
		console.log(data);
	});
	$.ajax("http://chegg-tutors.appspot.com/coding-challenge/api/user/?username=Trump4Pres,FeelTheBern1").done(function (data) {
		// This logs Trump4Pres's user data, since the username is registered, but
		// no user data for FeelTheBern1, since that username is not currently registered
		//console.log(JSON.stringify(data);
		//raw please thanks!!!
		console.log(data);
	});
	$("#chg-balloon-input").change(function () {
		// This is where you come in!!
		//i came in like a wrecking ball
		console.log('ran observers');
		runObservers();
	});
	$("#chg-balloon-submit").click(function () {
		// This is where you come in!!
		//i came in like a wrecking ball
		console.log('click ran');
		runUsernameClick();
	});
}


function runEmptyObserver() {
	// TODO the form is now empty so we should clear the list of useable usernames (add them to badd list?)
	// TODO we should also clear out the suggested list
	if (formIsEmpty()) {
		console.log('empty observer wouldve just now ran');
	}
}


function runWordObserver() {
	// TODO the form is being typed in so we need to set some things to check for to try and guess/assume words
	// TODO check if a user used common ways to denote a change in the word.
	//TODO after above then add the word that just ended to the list if not already there
	if (!formIsEmpty()) {
		console.log('word observer wouldve just now ran');
	}
}


function formIsEmpty() {
	// body...
	if (getFormValue() == "") {
		return true;
	}
	return false;
}

function getFormValue() {
	return $("#chg-balloon-input").val();
}


function tellViewRequestIsLoading() {
	//TODO we add in a "were loading" message for the user
}

function tellViewRequestIsDone(names) {
	var newHTML = "";
	function addToIterateArray(name) {
		newHTML = newHTML.concat("<i class='green checkmark box icon'></i>".concat(name, "</br>"));
	}
	names.forEach(addToIterateArray);
	$("#username-suggestion-view").html(newHTML);
}

function tellViewInputIsEmpty() {
	// body...
}

function tellViewNameIsAvailable() {
	var newHTML = "<i class='green checkmark box icon'></i>".concat(getFormValue());
	newHTML = newHTML.concat(", is Available! Nit next to proced (or normally where the programmer would just auto move on to the next part)");
	$("#username-availability").html(newHTML);
}

function tellViewNameIsUnAvailable() {
	var newHTML = "<i class='green checkmark box icon'></i>".concat(getFormValue());
	newHTML = newHTML.concat(", is Un-available! Please try a suggestion from below or try a new username!");
	$("#username-availability").html(newHTML);
}


function setupUserNameList() {
	//since I dont have anything to act as "scope" we will pretend like its the whole window (app)
	if (window.USERNAMELIST === undefined) {
		window.USERNAMELIST = {};
		window.USERNAMELIST.usernameList = [];
		window.USERNAMELIST.goodUserNames = [];
		window.USERNAMELIST.badUserNames = [];
	}
}

function userNameLength() {
	return window.USERNAMELIST.usernameList.length;
}

//this just returns a list of useable username objects, or a string for use within a request. depending on the former will depend on what it returns upon fail, not sure just yet lots to do
function getUserNameList(forRequest = false) {

	//I wanted to make sure that only this function can get called, so that it will return the proper stuff, encapsulation things.
	//this returns the list of GOOD usernames as an array
	function getUseableUserNameListForAnIteration() {}

	//this returns the list of usernames as a string
	function getUseableUserNameListForARequest() {
		//this is needed to actually return something
		var returnString = "";

		//lets make sure that this scope has the ability to foreach over the array we are about to create
		//without having to create the function in line
		function addUserName(item) {
			console.log(item);
			returnString = returnString.concat(item);
			returnString = returnString.concat(",");
		}
		window.USERNAMELIST.usernameList.forEach(addUserName);
		returnString = returnString.substring(0, returnString.length - 1);
		return returnString;
	}

	if (forRequest) {
		return getUseableUserNameListForARequest();
	} else {
		return getUseableUserNameListForARequest();
	}
}

//this actually sets up, then runs the ajax request
function populateUseableUserNameListFromService() {
	// TODO check the below runs correctly
	setupUserNameList();
	if (userNameLength() < 1) {
		console.log('no useable usernames pregenerated!');
		noUseableUsernamesAddNumbers();
	}
	// TODO use the json service to send a request using the usernameList from window scope
	sendRequest();
}

//this is the fucntion that ajax calls when it successfullly recieves a response
function populateUseableUserNameList(data) {
	var inputUserNameIsAvailable = true;
	function mapDataToUserNameArray(value, index) {
		return value.username;
	}
	function setupBadUserName(item) {
		if (getFormValue() == item) {
			inputUserNameIsAvailable = false;
		}
		window.USERNAMELIST.badUserNames.push(String(item));
	}

	function setupGoodUserName(item) {
		if (window.USERNAMELIST.badUserNames.indexOf(String(item)) == -1) {
			window.USERNAMELIST.goodUserNames.push(String(item));
		}
	}
	//dont forget you cant iterate blindly over an object like this is mongo adam!!!!
	data = $.map(data, mapDataToUserNameArray);
	// TODO check the below runs correctly
	setupUserNameList();
	data.forEach(setupBadUserName);
	window.USERNAMELIST.usernameList.forEach(setupGoodUserName);
	window.USERNAMELIST.usernameList = [];
	// TODO from response put list of good usernames in place
	if (inputUserNameIsAvailable) {
		tellViewNameIsAvailable();
	} else {
		tellViewNameIsUnAvailable();
	}
	tellViewRequestIsDone(window.USERNAMELIST.goodUserNames);
}

//this is used by the form observers to add in possible names as they find them
function addNameToList(name) {
	// TODO check the below runs correctly
	setupUserNameList();
	//again casing as string cuz ive put no time into error handline
	window.USERNAMELIST.usernameList.push(String(name));
}

//this is used by the ajax response function to add in names that wont work
function addNameToBadList(name) {}
// TODO add in name to the list of bad user names in window scope


//this is used by the ajax response function to add in names that will work
function addNameToGoodList(name) {
	// TODO add in name to the list of good user names in window scope
}
//TODO implement this out to actually check for words, instead of just being all "hey look i can add 2 numbers at the end"

function finalWordCheck() {
	// TODO before we send off the request, make sure we have enough user names being sent of in the request
	// TODO make sure the below gets called at the right time, and works
}

function noUseableUsernamesAddNumbers() {
	// TODO we havent done so well and have no words to use to generate some good words, just add some numbers to whats in the form :(

	//lets make sure that this scope has the ability to foreach over the array we are about to create
	//without having to create the function in line
	function addRandomUserName(item) {
		addNameToList(formWord.concat(item));
	}

	console.log('O No! observers found no words, adding numbers so we have some now');
	//first we need some numbers
	//lets make sure they dont have a way of being the same!!!!
	var randomNumber = Math.floor(Math.random() * 1000);
	var randomModifer = Math.floor(Math.random() * 100);
	var randomDivider = Math.floor(Math.random() * 10);
	var randomNumbers = [String(randomNumber), String(randomNumber + randomModifer), String(randomNumber - randomModifer), String(Math.floor((randomNumber + randomModifer) / randomDivider)), String(Math.floor((randomNumber - randomModifer) / randomDivider))];
	//then we need to get the username itself, gonna cast as string cuz... i have no error handling like anywhere in here and im scared
	var formWord = String(getFormValue());
	randomNumbers.forEach(addRandomUserName);
	//cant forget to add the one that the user already suggested since everything is empty!!!
	addNameToList(formWord);
}

//one of the observers may have found a new word to use, check for it then add it in
function addWordToUseableWordsList(word) {
	// TODO make the above comment come true
}

function getUseableWordsList() {
	// TODO
}

function setupWordsList() {
	//since I dont have anything to act as "scope" we will pretend like its the whole window (app)
	if (window.WORDOBSERVER === undefined) {
		window.WORDOBSERVER = {};
		window.WORDOBSERVER.wordlist = {};
	}
}


function sendRequest() {
	function proeccessRequestResponse(data) {
		// This logs Trump4Pres's user data, since the username is registered, but
		// no user data for FeelTheBern1, since that username is not currently registered
		console.log("request done, logic starting");
		populateUseableUserNameList(data);
		console.log("request logic done");
	}

	// TODO use the below copied code to bring all the comments below it to life
	var url = "http://chegg-tutors.appspot.com/coding-challenge/api/user/?username=".concat(getUserNameList(true));
	console.log(url);
	$.ajax(url).done(function (data) {
		// This logs Hillary2016's user data, since the username is registered
		//console.log(JSON.stringify(data));
		//raw please thanks!!!
		console.log(data);
		proeccessRequestResponse(data);
	});
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsIkVtcHR5T2JzZXJ2ZXIuanMiLCJXb3JkT2JzZXJ2ZXIuanMiLCJGb3JtLmpzIiwiU3VnZ2VzdGlvblZpZXcuanMiLCJVc2VyTmFtZUxpc3QuanMiLCJXb3JkTGlzdC5qcyIsIlVzZXJOYW1lU2VydmljZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUlBLFNBQVMsZ0JBQVQsR0FBMkI7O0FBRTFCLEtBQUksQ0FBQyxhQUFELEVBQWdCO0FBQ25CLDJDQURtQjtBQUVuQiw2QkFGbUI7RUFBcEIsTUFHTztBQUNOLFVBQVEsR0FBUixDQUFZLGNBQVosRUFETTtBQUVOLHlCQUZNO0VBSFA7Q0FGRDs7QUFjQSxTQUFTLFlBQVQsR0FBdUI7O0FBRXRCLG1CQUZzQjtBQUd0QixvQkFIc0I7Q0FBdkI7O0FBTUEsU0FBUyxRQUFULEdBQW1COzs7O0FBSWxCLEdBQUUsSUFBRixDQUFPLGlGQUFQLEVBQTBGLElBQTFGLENBQStGLFVBQVMsSUFBVCxFQUFlOzs7O0FBSTdHLFVBQVEsR0FBUixDQUFZLElBQVosRUFKNkc7RUFBZixDQUEvRixDQUprQjtBQVVsQixHQUFFLElBQUYsQ0FBTyw2RkFBUCxFQUFzRyxJQUF0RyxDQUEyRyxVQUFTLElBQVQsRUFBZTs7Ozs7QUFLekgsVUFBUSxHQUFSLENBQVksSUFBWixFQUx5SDtFQUFmLENBQTNHLENBVmtCO0FBaUJsQixHQUFFLG9CQUFGLEVBQXdCLE1BQXhCLENBQStCLFlBQVc7OztBQUd6QyxVQUFRLEdBQVIsQ0FBWSxlQUFaLEVBSHlDO0FBSXpDLGlCQUp5QztFQUFYLENBQS9CLENBakJrQjtBQXVCbEIsR0FBRSxxQkFBRixFQUF5QixLQUF6QixDQUErQixZQUFXOzs7QUFHekMsVUFBUSxHQUFSLENBQVksV0FBWixFQUh5QztBQUl6QyxxQkFKeUM7RUFBWCxDQUEvQixDQXZCa0I7Q0FBbkI7OztBQ2xCQSxTQUFTLGdCQUFULEdBQTRCOzs7QUFHM0IsS0FBSSxhQUFKLEVBQW1CO0FBQ2xCLFVBQVEs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QUFXLENBQUMsZUFBZSxhQUFmLENBQUQsR0FBa0MsYUFBbEMsQ0FBbEIsQ0FMbUIsQ0FBaEI7O0FBaEJrQyxLQXdCbEMsV0FBVyxPQUFPLGNBQVAsQ0FBWCxDQXhCa0M7QUF5QnRDLGVBQWMsT0FBZCxDQUFzQixpQkFBdEI7O0FBekJzQyxjQTJCdEMsQ0FBYyxRQUFkLEVBM0JzQztDQUF2Qzs7O0FBK0JBLFNBQVMseUJBQVQsQ0FBbUMsSUFBbkMsRUFBd0M7O0NBQXhDOztBQUlBLFNBQVMsbUJBQVQsR0FBOEI7O0NBQTlCOztBQUlBLFNBQVMsY0FBVCxHQUF5Qjs7QUFFeEIsS0FBRyxPQUFPLFlBQVAsS0FBd0IsU0FBeEIsRUFBa0M7QUFDcEMsU0FBTyxZQUFQLEdBQXNCLEVBQXRCLENBRG9DO0FBRXBDLFNBQU8sWUFBUCxDQUFvQixRQUFwQixHQUErQixFQUEvQixDQUZvQztFQUFyQztDQUZEOzs7QUM1Q0EsU0FBUyxXQUFULEdBQXVCO0FBQ3RCLFVBQVMsd0JBQVQsQ0FBa0MsSUFBbEMsRUFBdUM7OztBQUd0QyxVQUFRLEdBQVIsQ0FBWSw4QkFBWixFQUhzQztBQUl0Qyw4QkFBNEIsSUFBNUIsRUFKc0M7QUFLdEMsVUFBUSxHQUFSLENBQVksb0JBQVosRUFMc0M7RUFBdkM7OztBQURzQixLQVdsQixNQUFNLHVFQUF1RSxNQUF2RSxDQUE4RSxnQkFBZ0IsSUFBaEIsQ0FBOUUsQ0FBTixDQVhrQjtBQVl0QixTQUFRLEdBQVIsQ0FBWSxHQUFaLEVBWnNCO0FBYXRCLEdBQUUsSUFBRixDQUFPLEdBQVAsRUFBWSxJQUFaLENBQWlCLFVBQVMsSUFBVCxFQUFlOzs7O0FBSS9CLFVBQVEsR0FBUixDQUFZLElBQVosRUFKK0I7QUFLL0IsMkJBQXlCLElBQXpCLEVBTCtCO0VBQWYsQ0FBakIsQ0Fic0I7Q0FBdkIiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5cblxuXG5mdW5jdGlvbiBydW5Vc2VybmFtZUNsaWNrKCl7XG5cdC8vVE9ETyB0aGUgdXNlciBoYXMgbm93IGNsaWNrZWQgY2hlY2sgc28gd2UgbmVlZCB0byBtYWtlIHN1cmUgaXRzIG5vdCBlbXB0eSwgZWxzZSBnaXZlIGFuIGVycm9yXG5cdGlmICghZm9ybUlzRW1wdHkoKSkge1xuXHRcdHBvcHVsYXRlVXNlYWJsZVVzZXJOYW1lTGlzdEZyb21TZXJ2aWNlKCk7XG5cdFx0dGVsbFZpZXdSZXF1ZXN0SXNMb2FkaW5nKCk7XG5cdH0gZWxzZSB7XG5cdFx0Y29uc29sZS5sb2coZ2V0Rm9ybVZhbHVlKCkpO1xuXHRcdHRlbGxWaWV3SW5wdXRJc0VtcHR5KClcblx0fVxuXHRcbn1cblxuXG5cbmZ1bmN0aW9uIHJ1bk9ic2VydmVycygpe1xuXHQvL1RPRE8gYWN0dWFsbHkgZmxlc2ggdGhlc2Ugb3V0IHRvIFwiZ3Vlc3NcIiBwb3NzaWJsZSB1c2VybmFtZXMgdG8gc2VuZCBvdmVyIGluIGFkZGl0aW9uIHRvIHdoYXQgdGhleSBjaGVjayB0aGF0IEZJUlNUIGNsaWNrXG5cdHJ1bldvcmRPYnNlcnZlcigpO1xuXHRydW5FbXB0eU9ic2VydmVyKCk7XG59XG5cbmZ1bmN0aW9uIHNldHVwQXBwKCl7XG5cblx0Ly8gVGhlIFVzZXIgc2VhcmNoIEFQSSBhY2NlcHRzIGEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgdXNlcm5hbWVzLCBhbmQgcmV0dXJuc1xuXHQvLyB1c2VyIGRhdGEgZm9yIGFueSBtYXRjaGluZyByZWNvcmRzXG5cdCQuYWpheChcImh0dHA6Ly9jaGVnZy10dXRvcnMuYXBwc3BvdC5jb20vY29kaW5nLWNoYWxsZW5nZS9hcGkvdXNlci8/dXNlcm5hbWU9SGlsbGFyeTIwMTZcIikuZG9uZShmdW5jdGlvbihkYXRhKSB7XG5cdFx0Ly8gVGhpcyBsb2dzIEhpbGxhcnkyMDE2J3MgdXNlciBkYXRhLCBzaW5jZSB0aGUgdXNlcm5hbWUgaXMgcmVnaXN0ZXJlZFxuXHRcdC8vY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuXHRcdC8vcmF3IHBsZWFzZSB0aGFua3MhISFcblx0XHRjb25zb2xlLmxvZyhkYXRhKTtcblx0ICB9KTtcblx0JC5hamF4KFwiaHR0cDovL2NoZWdnLXR1dG9ycy5hcHBzcG90LmNvbS9jb2RpbmctY2hhbGxlbmdlL2FwaS91c2VyLz91c2VybmFtZT1UcnVtcDRQcmVzLEZlZWxUaGVCZXJuMVwiKS5kb25lKGZ1bmN0aW9uKGRhdGEpIHtcblx0XHQvLyBUaGlzIGxvZ3MgVHJ1bXA0UHJlcydzIHVzZXIgZGF0YSwgc2luY2UgdGhlIHVzZXJuYW1lIGlzIHJlZ2lzdGVyZWQsIGJ1dFxuXHRcdC8vIG5vIHVzZXIgZGF0YSBmb3IgRmVlbFRoZUJlcm4xLCBzaW5jZSB0aGF0IHVzZXJuYW1lIGlzIG5vdCBjdXJyZW50bHkgcmVnaXN0ZXJlZFxuXHRcdC8vY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG5cdFx0Ly9yYXcgcGxlYXNlIHRoYW5rcyEhIVxuXHRcdGNvbnNvbGUubG9nKGRhdGEpO1xuXHQgIH0pO1xuXHQkKFwiI2NoZy1iYWxsb29uLWlucHV0XCIpLmNoYW5nZShmdW5jdGlvbigpIHtcblx0XHQvLyBUaGlzIGlzIHdoZXJlIHlvdSBjb21lIGluISFcblx0XHQvL2kgY2FtZSBpbiBsaWtlIGEgd3JlY2tpbmcgYmFsbFxuXHRcdGNvbnNvbGUubG9nKCdyYW4gb2JzZXJ2ZXJzJyk7XG5cdFx0cnVuT2JzZXJ2ZXJzKCk7XG5cdH0pO1xuXHQkKFwiI2NoZy1iYWxsb29uLXN1Ym1pdFwiKS5jbGljayhmdW5jdGlvbigpIHtcblx0XHQvLyBUaGlzIGlzIHdoZXJlIHlvdSBjb21lIGluISFcblx0XHQvL2kgY2FtZSBpbiBsaWtlIGEgd3JlY2tpbmcgYmFsbFxuXHRcdGNvbnNvbGUubG9nKCdjbGljayByYW4nKTtcblx0XHRydW5Vc2VybmFtZUNsaWNrKCk7XG5cdH0pO1xufSIsIlxuXG5cblxuXG5cbmZ1bmN0aW9uIHJ1bkVtcHR5T2JzZXJ2ZXIoKSB7XG5cdC8vIFRPRE8gdGhlIGZvcm0gaXMgbm93IGVtcHR5IHNvIHdlIHNob3VsZCBjbGVhciB0aGUgbGlzdCBvZiB1c2VhYmxlIHVzZXJuYW1lcyAoYWRkIHRoZW0gdG8gYmFkZCBsaXN0Pylcblx0Ly8gVE9ETyB3ZSBzaG91bGQgYWxzbyBjbGVhciBvdXQgdGhlIHN1Z2dlc3RlZCBsaXN0XG5cdGlmIChmb3JtSXNFbXB0eSgpKSB7XG5cdFx0Y29uc29sZS5sb2coJ2VtcHR5IG9ic2VydmVyIHdvdWxkdmUganVzdCBub3cgcmFuJyk7XG5cdH1cbn0iLCJcblxuXG5cblxuZnVuY3Rpb24gcnVuV29yZE9ic2VydmVyKCkge1xuXHQvLyBUT0RPIHRoZSBmb3JtIGlzIGJlaW5nIHR5cGVkIGluIHNvIHdlIG5lZWQgdG8gc2V0IHNvbWUgdGhpbmdzIHRvIGNoZWNrIGZvciB0byB0cnkgYW5kIGd1ZXNzL2Fzc3VtZSB3b3Jkc1xuXHQvLyBUT0RPIGNoZWNrIGlmIGEgdXNlciB1c2VkIGNvbW1vbiB3YXlzIHRvIGRlbm90ZSBhIGNoYW5nZSBpbiB0aGUgd29yZC4gXG5cdC8vVE9ETyBhZnRlciBhYm92ZSB0aGVuIGFkZCB0aGUgd29yZCB0aGF0IGp1c3QgZW5kZWQgdG8gdGhlIGxpc3QgaWYgbm90IGFscmVhZHkgdGhlcmVcblx0aWYgKCFmb3JtSXNFbXB0eSgpKSB7XG5cdFx0Y29uc29sZS5sb2coJ3dvcmQgb2JzZXJ2ZXIgd291bGR2ZSBqdXN0IG5vdyByYW4nKTtcblx0fVxufSIsIlxuXG5cblxuXG5cblxuXG5mdW5jdGlvbiBmb3JtSXNFbXB0eSgpIHtcblx0Ly8gYm9keS4uLlxuXHRpZiAoZ2V0Rm9ybVZhbHVlKCkgPT0gXCJcIikge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdHJldHVybiBmYWxzZTtcbn1cblxuXG5mdW5jdGlvbiBnZXRGb3JtVmFsdWUoKSB7XG5cdHJldHVybiAkKFwiI2NoZy1iYWxsb29uLWlucHV0XCIpLnZhbCgpO1xufSIsIlxuXG5cbmZ1bmN0aW9uIHRlbGxWaWV3UmVxdWVzdElzTG9hZGluZygpIHtcblx0Ly9UT0RPIHdlIGFkZCBpbiBhIFwid2VyZSBsb2FkaW5nXCIgbWVzc2FnZSBmb3IgdGhlIHVzZXJcbn1cblxuZnVuY3Rpb24gdGVsbFZpZXdSZXF1ZXN0SXNEb25lKG5hbWVzKSB7XG5cdHZhciBuZXdIVE1MID0gXCJcIlxuXHRmdW5jdGlvbiBhZGRUb0l0ZXJhdGVBcnJheShuYW1lKSB7XG5cdFx0bmV3SFRNTCA9IG5ld0hUTUwuY29uY2F0KFwiPGkgY2xhc3M9J2dyZWVuIGNoZWNrbWFyayBib3ggaWNvbic+PC9pPlwiLmNvbmNhdCggbmFtZSwgXCI8L2JyPlwiKSk7XG5cdH1cblx0bmFtZXMuZm9yRWFjaChhZGRUb0l0ZXJhdGVBcnJheSk7XG5cdCQoXCIjdXNlcm5hbWUtc3VnZ2VzdGlvbi12aWV3XCIpLmh0bWwobmV3SFRNTCk7XG59XG5cbmZ1bmN0aW9uIHRlbGxWaWV3SW5wdXRJc0VtcHR5KCkge1xuXHQvLyBib2R5Li4uXG59XG5cblxuXG5mdW5jdGlvbiB0ZWxsVmlld05hbWVJc0F2YWlsYWJsZSgpe1xuXHR2YXIgbmV3SFRNTCA9IFwiPGkgY2xhc3M9J2dyZWVuIGNoZWNrbWFyayBib3ggaWNvbic+PC9pPlwiLmNvbmNhdChnZXRGb3JtVmFsdWUoKSApO1xuXHRuZXdIVE1MID0gbmV3SFRNTC5jb25jYXQoXCIsIGlzIEF2YWlsYWJsZSEgTml0IG5leHQgdG8gcHJvY2VkIChvciBub3JtYWxseSB3aGVyZSB0aGUgcHJvZ3JhbW1lciB3b3VsZCBqdXN0IGF1dG8gbW92ZSBvbiB0byB0aGUgbmV4dCBwYXJ0KVwiKTtcblx0JChcIiN1c2VybmFtZS1hdmFpbGFiaWxpdHlcIikuaHRtbChuZXdIVE1MKTtcbn1cblxuZnVuY3Rpb24gdGVsbFZpZXdOYW1lSXNVbkF2YWlsYWJsZSgpe1xuXHR2YXIgbmV3SFRNTCA9IFwiPGkgY2xhc3M9J2dyZWVuIGNoZWNrbWFyayBib3ggaWNvbic+PC9pPlwiLmNvbmNhdChnZXRGb3JtVmFsdWUoKSk7XG5cdG5ld0hUTUwgPSBuZXdIVE1MLmNvbmNhdChcIiwgaXMgVW4tYXZhaWxhYmxlISBQbGVhc2UgdHJ5IGEgc3VnZ2VzdGlvbiBmcm9tIGJlbG93IG9yIHRyeSBhIG5ldyB1c2VybmFtZSFcIik7XG5cdCQoXCIjdXNlcm5hbWUtYXZhaWxhYmlsaXR5XCIpLmh0bWwobmV3SFRNTCk7XG59IiwiXG5cblxuZnVuY3Rpb24gc2V0dXBVc2VyTmFtZUxpc3QoKXtcblx0Ly9zaW5jZSBJIGRvbnQgaGF2ZSBhbnl0aGluZyB0byBhY3QgYXMgXCJzY29wZVwiIHdlIHdpbGwgcHJldGVuZCBsaWtlIGl0cyB0aGUgd2hvbGUgd2luZG93IChhcHApXG5cdGlmKHdpbmRvdy5VU0VSTkFNRUxJU1QgPT09IHVuZGVmaW5lZCl7XG5cdFx0d2luZG93LlVTRVJOQU1FTElTVCA9IHt9O1xuXHRcdHdpbmRvdy5VU0VSTkFNRUxJU1QudXNlcm5hbWVMaXN0ID0gW107XG5cdFx0d2luZG93LlVTRVJOQU1FTElTVC5nb29kVXNlck5hbWVzID0gW107XG5cdFx0d2luZG93LlVTRVJOQU1FTElTVC5iYWRVc2VyTmFtZXMgPSBbXTtcblx0fVxufVxuXG5mdW5jdGlvbiB1c2VyTmFtZUxlbmd0aCgpIHtcblx0cmV0dXJuIHdpbmRvdy5VU0VSTkFNRUxJU1QudXNlcm5hbWVMaXN0Lmxlbmd0aDtcbn1cblxuLy90aGlzIGp1c3QgcmV0dXJucyBhIGxpc3Qgb2YgdXNlYWJsZSB1c2VybmFtZSBvYmplY3RzLCBvciBhIHN0cmluZyBmb3IgdXNlIHdpdGhpbiBhIHJlcXVlc3QuIGRlcGVuZGluZyBvbiB0aGUgZm9ybWVyIHdpbGwgZGVwZW5kIG9uIHdoYXQgaXQgcmV0dXJucyB1cG9uIGZhaWwsIG5vdCBzdXJlIGp1c3QgeWV0IGxvdHMgdG8gZG9cbmZ1bmN0aW9uIGdldFVzZXJOYW1lTGlzdChmb3JSZXF1ZXN0ID0gZmFsc2UpIHtcblxuXG5cdC8vSSB3YW50ZWQgdG8gbWFrZSBzdXJlIHRoYXQgb25seSB0aGlzIGZ1bmN0aW9uIGNhbiBnZXQgY2FsbGVkLCBzbyB0aGF0IGl0IHdpbGwgcmV0dXJuIHRoZSBwcm9wZXIgc3R1ZmYsIGVuY2Fwc3VsYXRpb24gdGhpbmdzLlxuXHQvL3RoaXMgcmV0dXJucyB0aGUgbGlzdCBvZiBHT09EIHVzZXJuYW1lcyBhcyBhbiBhcnJheVxuXHRmdW5jdGlvbiBnZXRVc2VhYmxlVXNlck5hbWVMaXN0Rm9yQW5JdGVyYXRpb24oKSB7XG5cdH1cblxuXHQvL3RoaXMgcmV0dXJucyB0aGUgbGlzdCBvZiB1c2VybmFtZXMgYXMgYSBzdHJpbmdcblx0ZnVuY3Rpb24gZ2V0VXNlYWJsZVVzZXJOYW1lTGlzdEZvckFSZXF1ZXN0KCkge1xuXHRcdC8vdGhpcyBpcyBuZWVkZWQgdG8gYWN0dWFsbHkgcmV0dXJuIHNvbWV0aGluZ1xuXHRcdHZhciByZXR1cm5TdHJpbmcgPSBcIlwiO1xuXG5cdFx0Ly9sZXRzIG1ha2Ugc3VyZSB0aGF0IHRoaXMgc2NvcGUgaGFzIHRoZSBhYmlsaXR5IHRvIGZvcmVhY2ggb3ZlciB0aGUgYXJyYXkgd2UgYXJlIGFib3V0IHRvIGNyZWF0ZVxuXHRcdC8vd2l0aG91dCBoYXZpbmcgdG8gY3JlYXRlIHRoZSBmdW5jdGlvbiBpbiBsaW5lXG5cdFx0ZnVuY3Rpb24gYWRkVXNlck5hbWUoaXRlbSl7XG5cdFx0XHRjb25zb2xlLmxvZyhpdGVtKTtcblx0XHRcdHJldHVyblN0cmluZyA9IHJldHVyblN0cmluZy5jb25jYXQoaXRlbSk7XG5cdFx0XHRyZXR1cm5TdHJpbmcgPSByZXR1cm5TdHJpbmcuY29uY2F0KFwiLFwiKTtcblx0XHR9XG5cdFx0d2luZG93LlVTRVJOQU1FTElTVC51c2VybmFtZUxpc3QuZm9yRWFjaChhZGRVc2VyTmFtZSlcblx0XHRyZXR1cm5TdHJpbmcgPSByZXR1cm5TdHJpbmcuc3Vic3RyaW5nKDAsIHJldHVyblN0cmluZy5sZW5ndGgtMSlcblx0XHRyZXR1cm4gcmV0dXJuU3RyaW5nO1xuXHR9XG5cblx0aWYoZm9yUmVxdWVzdCl7XG5cdFx0cmV0dXJuIGdldFVzZWFibGVVc2VyTmFtZUxpc3RGb3JBUmVxdWVzdCgpO1xuXHR9ZWxzZXtcblx0XHRyZXR1cm4gZ2V0VXNlYWJsZVVzZXJOYW1lTGlzdEZvckFSZXF1ZXN0KCk7XG5cdH1cbn1cblxuXG5cblxuXG4vL3RoaXMgYWN0dWFsbHkgc2V0cyB1cCwgdGhlbiBydW5zIHRoZSBhamF4IHJlcXVlc3RcbmZ1bmN0aW9uIHBvcHVsYXRlVXNlYWJsZVVzZXJOYW1lTGlzdEZyb21TZXJ2aWNlKCkge1xuXHQvLyBUT0RPIGNoZWNrIHRoZSBiZWxvdyBydW5zIGNvcnJlY3RseVxuXHRzZXR1cFVzZXJOYW1lTGlzdCgpO1xuXHRpZiAodXNlck5hbWVMZW5ndGgoKSA8IDEpIHtcblx0XHRjb25zb2xlLmxvZygnbm8gdXNlYWJsZSB1c2VybmFtZXMgcHJlZ2VuZXJhdGVkIScpO1xuXHRcdG5vVXNlYWJsZVVzZXJuYW1lc0FkZE51bWJlcnMoKTtcblx0fVxuXHQvLyBUT0RPIHVzZSB0aGUganNvbiBzZXJ2aWNlIHRvIHNlbmQgYSByZXF1ZXN0IHVzaW5nIHRoZSB1c2VybmFtZUxpc3QgZnJvbSB3aW5kb3cgc2NvcGVcblx0c2VuZFJlcXVlc3QoKTtcbn1cblxuXG4vL3RoaXMgaXMgdGhlIGZ1Y250aW9uIHRoYXQgYWpheCBjYWxscyB3aGVuIGl0IHN1Y2Nlc3NmdWxsbHkgcmVjaWV2ZXMgYSByZXNwb25zZVxuZnVuY3Rpb24gcG9wdWxhdGVVc2VhYmxlVXNlck5hbWVMaXN0KGRhdGEpIHtcblx0dmFyIGlucHV0VXNlck5hbWVJc0F2YWlsYWJsZSA9IHRydWU7XG5cdGZ1bmN0aW9uIG1hcERhdGFUb1VzZXJOYW1lQXJyYXkodmFsdWUsIGluZGV4KXtcblx0XHRyZXR1cm4gdmFsdWUudXNlcm5hbWU7XG5cdH1cblx0ZnVuY3Rpb24gc2V0dXBCYWRVc2VyTmFtZShpdGVtKXtcblx0XHRpZiAoZ2V0Rm9ybVZhbHVlKCkgPT0gaXRlbSkge1xuXHRcdFx0aW5wdXRVc2VyTmFtZUlzQXZhaWxhYmxlID0gZmFsc2U7XG5cdFx0fVxuXHRcdHdpbmRvdy5VU0VSTkFNRUxJU1QuYmFkVXNlck5hbWVzLnB1c2goU3RyaW5nKGl0ZW0pKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHNldHVwR29vZFVzZXJOYW1lKGl0ZW0pe1xuXHRcdGlmICh3aW5kb3cuVVNFUk5BTUVMSVNULmJhZFVzZXJOYW1lcy5pbmRleE9mKFN0cmluZyhpdGVtKSkgID09IC0xKSB7XG5cdFx0XHR3aW5kb3cuVVNFUk5BTUVMSVNULmdvb2RVc2VyTmFtZXMucHVzaChTdHJpbmcoaXRlbSkpO1xuXHRcdH1cblx0fVxuXHQvL2RvbnQgZm9yZ2V0IHlvdSBjYW50IGl0ZXJhdGUgYmxpbmRseSBvdmVyIGFuIG9iamVjdCBsaWtlIHRoaXMgaXMgbW9uZ28gYWRhbSEhISFcblx0ZGF0YSA9ICQubWFwKGRhdGEsIG1hcERhdGFUb1VzZXJOYW1lQXJyYXkpO1xuXHQvLyBUT0RPIGNoZWNrIHRoZSBiZWxvdyBydW5zIGNvcnJlY3RseVxuXHRzZXR1cFVzZXJOYW1lTGlzdCgpO1xuXHRkYXRhLmZvckVhY2goc2V0dXBCYWRVc2VyTmFtZSk7XG5cdHdpbmRvdy5VU0VSTkFNRUxJU1QudXNlcm5hbWVMaXN0LmZvckVhY2goc2V0dXBHb29kVXNlck5hbWUpO1xuXHR3aW5kb3cuVVNFUk5BTUVMSVNULnVzZXJuYW1lTGlzdCA9IFtdXG5cdC8vIFRPRE8gZnJvbSByZXNwb25zZSBwdXQgbGlzdCBvZiBnb29kIHVzZXJuYW1lcyBpbiBwbGFjZVxuXHRpZiAoaW5wdXRVc2VyTmFtZUlzQXZhaWxhYmxlKSB7XG5cdFx0dGVsbFZpZXdOYW1lSXNBdmFpbGFibGUoKTtcblx0fSBlbHNlIHtcblx0XHR0ZWxsVmlld05hbWVJc1VuQXZhaWxhYmxlKCk7XG5cdH1cblx0dGVsbFZpZXdSZXF1ZXN0SXNEb25lKHdpbmRvdy5VU0VSTkFNRUxJU1QuZ29vZFVzZXJOYW1lcyk7XG59XG5cbi8vdGhpcyBpcyB1c2VkIGJ5IHRoZSBmb3JtIG9ic2VydmVycyB0byBhZGQgaW4gcG9zc2libGUgbmFtZXMgYXMgdGhleSBmaW5kIHRoZW1cbmZ1bmN0aW9uIGFkZE5hbWVUb0xpc3QobmFtZSl7XG5cdC8vIFRPRE8gY2hlY2sgdGhlIGJlbG93IHJ1bnMgY29ycmVjdGx5XG5cdHNldHVwVXNlck5hbWVMaXN0KCk7XG5cdC8vYWdhaW4gY2FzaW5nIGFzIHN0cmluZyBjdXogaXZlIHB1dCBubyB0aW1lIGludG8gZXJyb3IgaGFuZGxpbmVcblx0d2luZG93LlVTRVJOQU1FTElTVC51c2VybmFtZUxpc3QucHVzaChTdHJpbmcobmFtZSkpO1xufVxuXG4vL3RoaXMgaXMgdXNlZCBieSB0aGUgYWpheCByZXNwb25zZSBmdW5jdGlvbiB0byBhZGQgaW4gbmFtZXMgdGhhdCB3b250IHdvcmtcbmZ1bmN0aW9uIGFkZE5hbWVUb0JhZExpc3QobmFtZSl7XG5cdC8vIFRPRE8gYWRkIGluIG5hbWUgdG8gdGhlIGxpc3Qgb2YgYmFkIHVzZXIgbmFtZXMgaW4gd2luZG93IHNjb3BlXG59XG5cblxuLy90aGlzIGlzIHVzZWQgYnkgdGhlIGFqYXggcmVzcG9uc2UgZnVuY3Rpb24gdG8gYWRkIGluIG5hbWVzIHRoYXQgd2lsbCB3b3JrXG5mdW5jdGlvbiBhZGROYW1lVG9Hb29kTGlzdChuYW1lKXtcblx0Ly8gVE9ETyBhZGQgaW4gbmFtZSB0byB0aGUgbGlzdCBvZiBnb29kIHVzZXIgbmFtZXMgaW4gd2luZG93IHNjb3BlXG59IiwiLy9UT0RPIGltcGxlbWVudCB0aGlzIG91dCB0byBhY3R1YWxseSBjaGVjayBmb3Igd29yZHMsIGluc3RlYWQgb2YganVzdCBiZWluZyBhbGwgXCJoZXkgbG9vayBpIGNhbiBhZGQgMiBudW1iZXJzIGF0IHRoZSBlbmRcIlxuXG5cblxuZnVuY3Rpb24gZmluYWxXb3JkQ2hlY2soKSB7XG5cdC8vIFRPRE8gYmVmb3JlIHdlIHNlbmQgb2ZmIHRoZSByZXF1ZXN0LCBtYWtlIHN1cmUgd2UgaGF2ZSBlbm91Z2ggdXNlciBuYW1lcyBiZWluZyBzZW50IG9mIGluIHRoZSByZXF1ZXN0XG5cdC8vIFRPRE8gbWFrZSBzdXJlIHRoZSBiZWxvdyBnZXRzIGNhbGxlZCBhdCB0aGUgcmlnaHQgdGltZSwgYW5kIHdvcmtzXG59XG5cbmZ1bmN0aW9uIG5vVXNlYWJsZVVzZXJuYW1lc0FkZE51bWJlcnMoKXtcblx0Ly8gVE9ETyB3ZSBoYXZlbnQgZG9uZSBzbyB3ZWxsIGFuZCBoYXZlIG5vIHdvcmRzIHRvIHVzZSB0byBnZW5lcmF0ZSBzb21lIGdvb2Qgd29yZHMsIGp1c3QgYWRkIHNvbWUgbnVtYmVycyB0byB3aGF0cyBpbiB0aGUgZm9ybSA6KFxuXG5cblx0Ly9sZXRzIG1ha2Ugc3VyZSB0aGF0IHRoaXMgc2NvcGUgaGFzIHRoZSBhYmlsaXR5IHRvIGZvcmVhY2ggb3ZlciB0aGUgYXJyYXkgd2UgYXJlIGFib3V0IHRvIGNyZWF0ZVxuXHQvL3dpdGhvdXQgaGF2aW5nIHRvIGNyZWF0ZSB0aGUgZnVuY3Rpb24gaW4gbGluZVxuXHRmdW5jdGlvbiBhZGRSYW5kb21Vc2VyTmFtZShpdGVtKXtcblx0XHRhZGROYW1lVG9MaXN0KGZvcm1Xb3JkLmNvbmNhdChpdGVtKSk7XG5cdH1cblxuXHRjb25zb2xlLmxvZygnTyBObyEgb2JzZXJ2ZXJzIGZvdW5kIG5vIHdvcmRzLCBhZGRpbmcgbnVtYmVycyBzbyB3ZSBoYXZlIHNvbWUgbm93Jyk7XG5cdC8vZmlyc3Qgd2UgbmVlZCBzb21lIG51bWJlcnNcblx0Ly9sZXRzIG1ha2Ugc3VyZSB0aGV5IGRvbnQgaGF2ZSBhIHdheSBvZiBiZWluZyB0aGUgc2FtZSEhISFcblx0dmFyIHJhbmRvbU51bWJlciA9IE1hdGguZmxvb3IoIE1hdGgucmFuZG9tKCkgKiAxMDAwICk7XG5cdHZhciByYW5kb21Nb2RpZmVyID0gTWF0aC5mbG9vciggTWF0aC5yYW5kb20oKSAqIDEwMCApO1xuXHR2YXIgcmFuZG9tRGl2aWRlciA9IE1hdGguZmxvb3IoIE1hdGgucmFuZG9tKCkgKiAxMCApO1xuXHR2YXIgcmFuZG9tTnVtYmVycyA9IFtcblx0XHRTdHJpbmcocmFuZG9tTnVtYmVyKSxcblx0XHRTdHJpbmcocmFuZG9tTnVtYmVyICsgcmFuZG9tTW9kaWZlciksXG5cdFx0U3RyaW5nKHJhbmRvbU51bWJlciAtIHJhbmRvbU1vZGlmZXIpLFxuXHRcdFN0cmluZyhNYXRoLmZsb29yKChyYW5kb21OdW1iZXIgKyByYW5kb21Nb2RpZmVyKSAvIHJhbmRvbURpdmlkZXIgKSksXG5cdFx0U3RyaW5nKE1hdGguZmxvb3IoKHJhbmRvbU51bWJlciAtIHJhbmRvbU1vZGlmZXIpICAvIHJhbmRvbURpdmlkZXIgKSksXG5cdF1cblx0Ly90aGVuIHdlIG5lZWQgdG8gZ2V0IHRoZSB1c2VybmFtZSBpdHNlbGYsIGdvbm5hIGNhc3QgYXMgc3RyaW5nIGN1ei4uLiBpIGhhdmUgbm8gZXJyb3IgaGFuZGxpbmcgbGlrZSBhbnl3aGVyZSBpbiBoZXJlIGFuZCBpbSBzY2FyZWRcblx0dmFyIGZvcm1Xb3JkID0gU3RyaW5nKGdldEZvcm1WYWx1ZSgpKTtcblx0cmFuZG9tTnVtYmVycy5mb3JFYWNoKGFkZFJhbmRvbVVzZXJOYW1lKTtcblx0Ly9jYW50IGZvcmdldCB0byBhZGQgdGhlIG9uZSB0aGF0IHRoZSB1c2VyIGFscmVhZHkgc3VnZ2VzdGVkIHNpbmNlIGV2ZXJ5dGhpbmcgaXMgZW1wdHkhISFcblx0YWRkTmFtZVRvTGlzdChmb3JtV29yZCk7XG59XG5cbi8vb25lIG9mIHRoZSBvYnNlcnZlcnMgbWF5IGhhdmUgZm91bmQgYSBuZXcgd29yZCB0byB1c2UsIGNoZWNrIGZvciBpdCB0aGVuIGFkZCBpdCBpblxuZnVuY3Rpb24gYWRkV29yZFRvVXNlYWJsZVdvcmRzTGlzdCh3b3JkKXtcblx0Ly8gVE9ETyBtYWtlIHRoZSBhYm92ZSBjb21tZW50IGNvbWUgdHJ1ZVxufVxuXG5mdW5jdGlvbiBnZXRVc2VhYmxlV29yZHNMaXN0KCl7XG5cdC8vIFRPRE8gXG59XG5cbmZ1bmN0aW9uIHNldHVwV29yZHNMaXN0KCl7XG5cdC8vc2luY2UgSSBkb250IGhhdmUgYW55dGhpbmcgdG8gYWN0IGFzIFwic2NvcGVcIiB3ZSB3aWxsIHByZXRlbmQgbGlrZSBpdHMgdGhlIHdob2xlIHdpbmRvdyAoYXBwKVxuXHRpZih3aW5kb3cuV09SRE9CU0VSVkVSID09PSB1bmRlZmluZWQpe1xuXHRcdHdpbmRvdy5XT1JET0JTRVJWRVIgPSB7fTtcblx0XHR3aW5kb3cuV09SRE9CU0VSVkVSLndvcmRsaXN0ID0ge307XG5cdH1cbn0iLCJcblxuXG5cbmZ1bmN0aW9uIHNlbmRSZXF1ZXN0KCkge1xuXHRmdW5jdGlvbiBwcm9lY2Nlc3NSZXF1ZXN0UmVzcG9uc2UoZGF0YSl7XG5cdFx0Ly8gVGhpcyBsb2dzIFRydW1wNFByZXMncyB1c2VyIGRhdGEsIHNpbmNlIHRoZSB1c2VybmFtZSBpcyByZWdpc3RlcmVkLCBidXRcblx0XHQvLyBubyB1c2VyIGRhdGEgZm9yIEZlZWxUaGVCZXJuMSwgc2luY2UgdGhhdCB1c2VybmFtZSBpcyBub3QgY3VycmVudGx5IHJlZ2lzdGVyZWRcblx0XHRjb25zb2xlLmxvZyhcInJlcXVlc3QgZG9uZSwgbG9naWMgc3RhcnRpbmdcIik7XG5cdFx0cG9wdWxhdGVVc2VhYmxlVXNlck5hbWVMaXN0KGRhdGEpO1xuXHRcdGNvbnNvbGUubG9nKFwicmVxdWVzdCBsb2dpYyBkb25lXCIpO1xuXHR9XG5cblxuXHQvLyBUT0RPIHVzZSB0aGUgYmVsb3cgY29waWVkIGNvZGUgdG8gYnJpbmcgYWxsIHRoZSBjb21tZW50cyBiZWxvdyBpdCB0byBsaWZlXG5cdHZhciB1cmwgPSBcImh0dHA6Ly9jaGVnZy10dXRvcnMuYXBwc3BvdC5jb20vY29kaW5nLWNoYWxsZW5nZS9hcGkvdXNlci8/dXNlcm5hbWU9XCIuY29uY2F0KGdldFVzZXJOYW1lTGlzdCh0cnVlKSk7XG5cdGNvbnNvbGUubG9nKHVybCk7XG5cdCQuYWpheCh1cmwpLmRvbmUoZnVuY3Rpb24oZGF0YSkge1xuXHRcdC8vIFRoaXMgbG9ncyBIaWxsYXJ5MjAxNidzIHVzZXIgZGF0YSwgc2luY2UgdGhlIHVzZXJuYW1lIGlzIHJlZ2lzdGVyZWRcblx0XHQvL2NvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcblx0XHQvL3JhdyBwbGVhc2UgdGhhbmtzISEhXG5cdFx0Y29uc29sZS5sb2coZGF0YSk7XG5cdFx0cHJvZWNjZXNzUmVxdWVzdFJlc3BvbnNlKGRhdGEpO1xuXHQgIH0pO1xufSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
